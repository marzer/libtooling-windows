#!/usr/bin/env python3

import shutil
import os
import subprocess
from argparse import ArgumentParser
from pathlib import Path
from misk import *



def git_query(git_args, cwd=None) -> str:
	assert git_args is not None
	proc = subprocess.run(['git'] + str(git_args).strip().split(),
		capture_output=True,
		cwd=str(Path.cwd() if cwd is None else cwd),
		encoding='utf-8',
		check=True)
	ret = proc.stdout.strip() if proc.stdout is not None else ''
	if not ret and proc.stderr.strip():
		raise Exception(rf'git exited with error: {proc.stderr.strip()}')
	return ret



def main():
	args = ArgumentParser(description='Makes a self-contained clang libtooling distribution for windows builds.')
	args.add_argument('--llvm', type=Path, default=None)
	args.add_argument('--build32', type=Path, default=None)
	args.add_argument('--build64', type=Path, default=None)
	args = args.parse_args()
	if args.llvm is None:
		args.llvm = Path(__file__).parent.parent.parent / r'llvm-project'  # this repo's neighbour
	if args.build32 is None:
		args.build32 = args.llvm / r'build32'
	if args.build64 is None:
		args.build64 = args.llvm / r'build64'

	root = args.llvm
	root: Path
	llvm = root / r'llvm'
	clang = root / r'clang'
	build32 = args.build32
	build32: Path
	build64 = args.build64
	build64: Path
	out = Path(__file__).parent.parent  # this repo's root
	configurations = (
		(32, build32, r'Debug'),
		(32, build32, r'Release'),
		(64, build64, r'Debug'),
		(64, build64, r'Release'),
	)
	junk = shutil.ignore_patterns(
		r'*.td', r'*.vcxproj', r'CMakeLists.txt', r'*.filters', r'*.cmake', r'*.stamp', r'*.depend', r'*.log',
		r'*.recipe', r'*.tlog', r'*.FileListAbsolute.txt', r'*.in', r'*.modulemap', r'.clang-format', r'*.build'
	)

	assert_existing_directory(llvm / r'include')
	assert_existing_directory(clang / r'include')
	for _, build, mode in configurations:
		assert_existing_directory(build / mode / r'lib')

	print(r'Creating output directories')
	delete_directory(out / r'include')
	delete_directory(out / r'lib')
	for bits, _, mode in configurations:
		os.makedirs(out / rf'lib/win{bits}-{mode}', exist_ok=True)

	print(r'Writing LLVM repo commit hash')
	with open(out / r'LLVM_COMMIT', r'w', encoding=r'utf-8', newline='\n') as f:
		print(git_query("rev-parse HEAD", cwd=root), file=f)

	print(r'Copying includes')
	includes = [
		# llvm
		(llvm / r'include/llvm', r'llvm'),
		(llvm / r'include/llvm-c', r'llvm-c'),
		# clang
		(clang / r'include/clang', r'clang'),
		(clang / r'include/clang-c', r'clang-c'),
		# generated files
		(build32 / r'include/llvm', r'win32/llvm'),
		(build64 / r'include/llvm', r'win64/llvm'),
		(build32 / r'tools/clang/include/clang', r'win32/clang'),
		(build64 / r'tools/clang/include/clang', r'win64/clang'),
	]
	for source, dest in includes:
		print(rf'	{source} => {dest}')
		shutil.copytree(source, out / r'include' / dest, dirs_exist_ok=True, ignore=junk)
	copy_file(root / r'LICENSE.txt', out / r'include')

	print(r'Copying libs')
	libs = [  #
		*[rf'LLVM{lib}' for lib in (r'BinaryFormat', r'BitReader', r'BitstreamReader', r'Core', r'FrontendOpenMP', r'Remarks', r'Support')],
		*[rf'clang{lib}' for lib in (r'AST', r'Basic', r'Frontend', r'Lex', r'Parse', r'Support', r'Tooling')]
	]
	for bits, build, mode in configurations:
		for lib in libs:
			source = build / mode / rf'lib/{lib}.lib'
			dest = rf'lib/win{bits}-{mode}'
			print(rf'	{source} => {dest}')
			copy_file(source, out / dest)

	print(r'Writing build scripts')
	script_preamble = rf'''
		#{"-"*119}
		#              *** this file was automatically generated by {Path(__file__).name}; do not edit it directly ***
		#{"-"*119}'''.strip().replace("\t\t", "")
	with open(out / r'lib/meson.build', r'w', encoding=r'utf-8', newline='\n') as f:
		f.write(
			rf'''
			{script_preamble}

			if is_x64
				if is_debug
					subdir('win64-Debug')
				else
					subdir('win64-Release')
				endif
			else
				if is_debug
					subdir('win32-Debug')
				else
					subdir('win32-Release')
				endif
			endif
			'''.strip().replace("\t\t\t", "") + '\n'
		)
	for bits, build, mode in configurations:
		with open(out / rf'lib/win{bits}-{mode}/meson.build', r'w', encoding=r'utf-8', newline='\n') as f:
			find_library = r''
			for lib in libs:
				find_library += f'''\tcpp.find_library('{lib}', dirs : [meson.current_source_dir()], required : true, static : true),\n'''
			f.write(
				rf'''
				{script_preamble}

				libs += [
				{find_library}
				]
				'''.strip().replace("\t\t\t\t", "") + '\n'
			)



if __name__ == '__main__':
	main()
